var otgsSwitcher=otgsSwitcher||{};otgsSwitcher.otgsPopoverTooltip=otgsSwitcher.otgsPopoverTooltip||{},otgsSwitcher.otgsPopoverTooltip.otgsTableStickyHeader=function(t){var e={};function i(r){if(e[r])return e[r].exports;var n=e[r]={i:r,l:!1,exports:{}};return t[r].call(n.exports,n,n.exports,i),n.l=!0,n.exports}return i.m=t,i.c=e,i.d=function(t,e,r){i.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:r})},i.r=function(t){Object.defineProperty(t,"__esModule",{value:!0})},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=6)}([,,,function(t,e){var i;i=function(){return this}();try{i=i||Function("return this")()||(0,eval)("this")}catch(t){"object"==typeof window&&(i=window)}t.exports=i},function(t,e,i){(function(e){!function(e,i){t.exports=i()}(0,function(){"use strict";var t="undefined"!=typeof window,i=t&&/MSIE |Trident\//.test(navigator.userAgent),r={};t&&(r.supported="requestAnimationFrame"in window,r.supportsTouch="ontouchstart"in window,r.usingTouch=!1,r.dynamicInputDetection=!0,r.iOS=/iPhone|iPad|iPod/.test(navigator.platform)&&!window.MSStream,r.onUserInputChange=function(){});var n={POPPER:".tippy-popper",TOOLTIP:".tippy-tooltip",CONTENT:".tippy-content",BACKDROP:".tippy-backdrop",ARROW:".tippy-arrow",ROUND_ARROW:".tippy-roundarrow",REFERENCE:"[data-tippy]"},o={placement:"top",livePlacement:!0,trigger:"mouseenter focus",animation:"shift-away",html:!1,animateFill:!0,arrow:!1,delay:0,duration:[350,300],interactive:!1,interactiveBorder:2,theme:"dark",size:"regular",distance:10,offset:0,hideOnClick:!0,multiple:!1,followCursor:!1,inertia:!1,updateDuration:350,sticky:!1,appendTo:function(){return document.body},zIndex:9999,touchHold:!1,performance:!1,dynamicTitle:!1,flip:!0,flipBehavior:"flip",arrowType:"sharp",arrowTransform:"",maxWidth:"",target:null,popperOptions:{},createPopperInstanceOnInit:!1,onShow:function(){},onShown:function(){},onHide:function(){},onHidden:function(){}},a=r.supported&&Object.keys(o);function p(t){return"[object Object]"===Object.prototype.toString.call(t)}function s(t){return[].slice.call(t)}function l(t){for(var e=[!1,"webkit"],i=t.charAt(0).toUpperCase()+t.slice(1),r=0;r<e.length;r++){var n=e[r],o=n?""+n+i:t;if(void 0!==document.body.style[o])return o}return null}var c=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")},f=function(){function t(t,e){for(var i=0;i<e.length;i++){var r=e[i];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,i,r){return i&&t(e.prototype,i),r&&t(e,r),e}}(),d=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var i=arguments[e];for(var r in i)Object.prototype.hasOwnProperty.call(i,r)&&(t[r]=i[r])}return t};function u(t){return{tooltip:t.querySelector(n.TOOLTIP),backdrop:t.querySelector(n.BACKDROP),content:t.querySelector(n.CONTENT)}}function m(t){var e=t.getAttribute("title");e&&t.setAttribute("data-original-title",e),t.removeAttribute("title")}
/**!
 * @fileOverview Kickass library to create and place poppers near their reference elements.
 * @version 1.12.9
 * @license
 * Copyright (c) 2016 Federico Zivolo and contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */for(var h="undefined"!=typeof window&&"undefined"!=typeof document,b=["Edge","Trident","Firefox"],v=0,y=0;y<b.length;y+=1)if(h&&navigator.userAgent.indexOf(b[y])>=0){v=1;break}var g=h&&window.Promise?function(t){var e=!1;return function(){e||(e=!0,window.Promise.resolve().then(function(){e=!1,t()}))}}:function(t){var e=!1;return function(){e||(e=!0,setTimeout(function(){e=!1,t()},v))}};function w(t){return t&&"[object Function]"==={}.toString.call(t)}function x(t,e){if(1!==t.nodeType)return[];var i=getComputedStyle(t,null);return e?i[e]:i}function k(t){return"HTML"===t.nodeName?t:t.parentNode||t.host}function E(t){if(!t)return document.body;switch(t.nodeName){case"HTML":case"BODY":return t.ownerDocument.body;case"#document":return t.body}var e=x(t),i=e.overflow,r=e.overflowX,n=e.overflowY;return/(auto|scroll)/.test(i+n+r)?t:E(k(t))}function T(t){var e=t&&t.offsetParent,i=e&&e.nodeName;return i&&"BODY"!==i&&"HTML"!==i?-1!==["TD","TABLE"].indexOf(e.nodeName)&&"static"===x(e,"position")?T(e):e:t?t.ownerDocument.documentElement:document.documentElement}function O(t){return null!==t.parentNode?O(t.parentNode):t}function L(t,e){if(!(t&&t.nodeType&&e&&e.nodeType))return document.documentElement;var i=t.compareDocumentPosition(e)&Node.DOCUMENT_POSITION_FOLLOWING,r=i?t:e,n=i?e:t,o=document.createRange();o.setStart(r,0),o.setEnd(n,0);var a=o.commonAncestorContainer;if(t!==a&&e!==a||r.contains(n))return function(t){var e=t.nodeName;return"BODY"!==e&&("HTML"===e||T(t.firstElementChild)===t)}(a)?a:T(a);var p=O(t);return p.host?L(p.host,e):L(t,O(e).host)}function A(t){var e="top"===(arguments.length>1&&void 0!==arguments[1]?arguments[1]:"top")?"scrollTop":"scrollLeft",i=t.nodeName;if("BODY"===i||"HTML"===i){var r=t.ownerDocument.documentElement;return(t.ownerDocument.scrollingElement||r)[e]}return t[e]}function C(t,e){var i="x"===e?"Left":"Top",r="Left"===i?"Right":"Bottom";return parseFloat(t["border"+i+"Width"],10)+parseFloat(t["border"+r+"Width"],10)}var Y=void 0,P=function(){return void 0===Y&&(Y=-1!==navigator.appVersion.indexOf("MSIE 10")),Y};function S(t,e,i,r){return Math.max(e["offset"+t],e["scroll"+t],i["client"+t],i["offset"+t],i["scroll"+t],P()?i["offset"+t]+r["margin"+("Height"===t?"Top":"Left")]+r["margin"+("Height"===t?"Bottom":"Right")]:0)}function M(){var t=document.body,e=document.documentElement,i=P()&&getComputedStyle(e);return{height:S("Height",t,e,i),width:S("Width",t,e,i)}}var X=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")},_=function(){function t(t,e){for(var i=0;i<e.length;i++){var r=e[i];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,i,r){return i&&t(e.prototype,i),r&&t(e,r),e}}(),D=function(t,e,i){return e in t?Object.defineProperty(t,e,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[e]=i,t},N=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var i=arguments[e];for(var r in i)Object.prototype.hasOwnProperty.call(i,r)&&(t[r]=i[r])}return t};function I(t){return N({},t,{right:t.left+t.width,bottom:t.top+t.height})}function H(t){var e={};if(P())try{e=t.getBoundingClientRect();var i=A(t,"top"),r=A(t,"left");e.top+=i,e.left+=r,e.bottom+=i,e.right+=r}catch(t){}else e=t.getBoundingClientRect();var n={left:e.left,top:e.top,width:e.right-e.left,height:e.bottom-e.top},o="HTML"===t.nodeName?M():{},a=o.width||t.clientWidth||n.right-n.left,p=o.height||t.clientHeight||n.bottom-n.top,s=t.offsetWidth-a,l=t.offsetHeight-p;if(s||l){var c=x(t);s-=C(c,"x"),l-=C(c,"y"),n.width-=s,n.height-=l}return I(n)}function R(t,e){var i=P(),r="HTML"===e.nodeName,n=H(t),o=H(e),a=E(t),p=x(e),s=parseFloat(p.borderTopWidth,10),l=parseFloat(p.borderLeftWidth,10),c=I({top:n.top-o.top-s,left:n.left-o.left-l,width:n.width,height:n.height});if(c.marginTop=0,c.marginLeft=0,!i&&r){var f=parseFloat(p.marginTop,10),d=parseFloat(p.marginLeft,10);c.top-=s-f,c.bottom-=s-f,c.left-=l-d,c.right-=l-d,c.marginTop=f,c.marginLeft=d}return(i?e.contains(a):e===a&&"BODY"!==a.nodeName)&&(c=function(t,e){var i=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=A(e,"top"),n=A(e,"left"),o=i?-1:1;return t.top+=r*o,t.bottom+=r*o,t.left+=n*o,t.right+=n*o,t}(c,e)),c}function F(t,e,i,r){var n={top:0,left:0},o=L(t,e);if("viewport"===r)n=function(t){var e=t.ownerDocument.documentElement,i=R(t,e),r=Math.max(e.clientWidth,window.innerWidth||0),n=Math.max(e.clientHeight,window.innerHeight||0),o=A(e),a=A(e,"left");return I({top:o-i.top+i.marginTop,left:a-i.left+i.marginLeft,width:r,height:n})}(o);else{var a=void 0;"scrollParent"===r?"BODY"===(a=E(k(e))).nodeName&&(a=t.ownerDocument.documentElement):a="window"===r?t.ownerDocument.documentElement:r;var p=R(a,o);if("HTML"!==a.nodeName||function t(e){var i=e.nodeName;return"BODY"!==i&&"HTML"!==i&&("fixed"===x(e,"position")||t(k(e)))}(o))n=p;else{var s=M(),l=s.height,c=s.width;n.top+=p.top-p.marginTop,n.bottom=l+p.top,n.left+=p.left-p.marginLeft,n.right=c+p.left}}return n.left+=i,n.top+=i,n.right-=i,n.bottom-=i,n}function W(t,e,i,r,n){var o=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0;if(-1===t.indexOf("auto"))return t;var a=F(i,r,o,n),p={top:{width:a.width,height:e.top-a.top},right:{width:a.right-e.right,height:a.height},bottom:{width:a.width,height:a.bottom-e.bottom},left:{width:e.left-a.left,height:a.height}},s=Object.keys(p).map(function(t){return N({key:t},p[t],{area:function(t){return t.width*t.height}(p[t])})}).sort(function(t,e){return e.area-t.area}),l=s.filter(function(t){var e=t.width,r=t.height;return e>=i.clientWidth&&r>=i.clientHeight}),c=l.length>0?l[0].key:s[0].key,f=t.split("-")[1];return c+(f?"-"+f:"")}function z(t,e,i){return R(i,L(e,i))}function B(t){var e=getComputedStyle(t),i=parseFloat(e.marginTop)+parseFloat(e.marginBottom),r=parseFloat(e.marginLeft)+parseFloat(e.marginRight);return{width:t.offsetWidth+r,height:t.offsetHeight+i}}function j(t){var e={left:"right",right:"left",bottom:"top",top:"bottom"};return t.replace(/left|right|bottom|top/g,function(t){return e[t]})}function U(t,e,i){i=i.split("-")[0];var r=B(t),n={width:r.width,height:r.height},o=-1!==["right","left"].indexOf(i),a=o?"top":"left",p=o?"left":"top",s=o?"height":"width",l=o?"width":"height";return n[a]=e[a]+e[s]/2-r[s]/2,n[p]=i===p?e[p]-r[l]:e[j(p)],n}function q(t,e){return Array.prototype.find?t.find(e):t.filter(e)[0]}function K(t,e,i){return(void 0===i?t:t.slice(0,function(t,e,i){if(Array.prototype.findIndex)return t.findIndex(function(t){return t[e]===i});var r=q(t,function(t){return t[e]===i});return t.indexOf(r)}(t,"name",i))).forEach(function(t){t.function&&console.warn("`modifier.function` is deprecated, use `modifier.fn`!");var i=t.function||t.fn;t.enabled&&w(i)&&(e.offsets.popper=I(e.offsets.popper),e.offsets.reference=I(e.offsets.reference),e=i(e,t))}),e}function V(t,e){return t.some(function(t){var i=t.name;return t.enabled&&i===e})}function G(t){for(var e=[!1,"ms","Webkit","Moz","O"],i=t.charAt(0).toUpperCase()+t.slice(1),r=0;r<e.length-1;r++){var n=e[r],o=n?""+n+i:t;if(void 0!==document.body.style[o])return o}return null}function J(t){var e=t.ownerDocument;return e?e.defaultView:window}function Q(t,e,i,r){i.updateBound=r,J(t).addEventListener("resize",i.updateBound,{passive:!0});var n=E(t);return function t(e,i,r,n){var o="BODY"===e.nodeName,a=o?e.ownerDocument.defaultView:e;a.addEventListener(i,r,{passive:!0}),o||t(E(a.parentNode),i,r,n),n.push(a)}(n,"scroll",i.updateBound,i.scrollParents),i.scrollElement=n,i.eventsEnabled=!0,i}function Z(){this.state.eventsEnabled&&(cancelAnimationFrame(this.scheduleUpdate),this.state=function(t,e){return J(t).removeEventListener("resize",e.updateBound),e.scrollParents.forEach(function(t){t.removeEventListener("scroll",e.updateBound)}),e.updateBound=null,e.scrollParents=[],e.scrollElement=null,e.eventsEnabled=!1,e}(this.reference,this.state))}function $(t){return""!==t&&!isNaN(parseFloat(t))&&isFinite(t)}function tt(t,e){Object.keys(e).forEach(function(i){var r="";-1!==["width","height","top","right","bottom","left"].indexOf(i)&&$(e[i])&&(r="px"),t.style[i]=e[i]+r})}function et(t,e,i){var r=q(t,function(t){return t.name===e}),n=!!r&&t.some(function(t){return t.name===i&&t.enabled&&t.order<r.order});if(!n){var o="`"+e+"`",a="`"+i+"`";console.warn(a+" modifier is required by "+o+" modifier in order to work, be sure to include it before "+o+"!")}return n}var it=["auto-start","auto","auto-end","top-start","top","top-end","right-start","right","right-end","bottom-end","bottom","bottom-start","left-end","left","left-start"],rt=it.slice(3);function nt(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],i=rt.indexOf(t),r=rt.slice(i+1).concat(rt.slice(0,i));return e?r.reverse():r}var ot={FLIP:"flip",CLOCKWISE:"clockwise",COUNTERCLOCKWISE:"counterclockwise"};function at(t,e,i,r){var n=[0,0],o=-1!==["right","left"].indexOf(r),a=t.split(/(\+|\-)/).map(function(t){return t.trim()}),p=a.indexOf(q(a,function(t){return-1!==t.search(/,|\s/)}));a[p]&&-1===a[p].indexOf(",")&&console.warn("Offsets separated by white space(s) are deprecated, use a comma (,) instead.");var s=/\s*,\s*|\s+/,l=-1!==p?[a.slice(0,p).concat([a[p].split(s)[0]]),[a[p].split(s)[1]].concat(a.slice(p+1))]:[a];return(l=l.map(function(t,r){var n=(1===r?!o:o)?"height":"width",a=!1;return t.reduce(function(t,e){return""===t[t.length-1]&&-1!==["+","-"].indexOf(e)?(t[t.length-1]=e,a=!0,t):a?(t[t.length-1]+=e,a=!1,t):t.concat(e)},[]).map(function(t){return function(t,e,i,r){var n=t.match(/((?:\-|\+)?\d*\.?\d*)(.*)/),o=+n[1],a=n[2];if(!o)return t;if(0===a.indexOf("%")){var p=void 0;switch(a){case"%p":p=i;break;case"%":case"%r":default:p=r}return I(p)[e]/100*o}if("vh"===a||"vw"===a)return("vh"===a?Math.max(document.documentElement.clientHeight,window.innerHeight||0):Math.max(document.documentElement.clientWidth,window.innerWidth||0))/100*o;return o}(t,n,e,i)})})).forEach(function(t,e){t.forEach(function(i,r){$(i)&&(n[e]+=i*("-"===t[r-1]?-1:1))})}),n}var pt={placement:"bottom",eventsEnabled:!0,removeOnDestroy:!1,onCreate:function(){},onUpdate:function(){},modifiers:{shift:{order:100,enabled:!0,fn:function(t){var e=t.placement,i=e.split("-")[0],r=e.split("-")[1];if(r){var n=t.offsets,o=n.reference,a=n.popper,p=-1!==["bottom","top"].indexOf(i),s=p?"left":"top",l=p?"width":"height",c={start:D({},s,o[s]),end:D({},s,o[s]+o[l]-a[l])};t.offsets.popper=N({},a,c[r])}return t}},offset:{order:200,enabled:!0,fn:function(t,e){var i=e.offset,r=t.placement,n=t.offsets,o=n.popper,a=n.reference,p=r.split("-")[0],s=void 0;return s=$(+i)?[+i,0]:at(i,o,a,p),"left"===p?(o.top+=s[0],o.left-=s[1]):"right"===p?(o.top+=s[0],o.left+=s[1]):"top"===p?(o.left+=s[0],o.top-=s[1]):"bottom"===p&&(o.left+=s[0],o.top+=s[1]),t.popper=o,t},offset:0},preventOverflow:{order:300,enabled:!0,fn:function(t,e){var i=e.boundariesElement||T(t.instance.popper);t.instance.reference===i&&(i=T(i));var r=F(t.instance.popper,t.instance.reference,e.padding,i);e.boundaries=r;var n=e.priority,o=t.offsets.popper,a={primary:function(t){var i=o[t];return o[t]<r[t]&&!e.escapeWithReference&&(i=Math.max(o[t],r[t])),D({},t,i)},secondary:function(t){var i="right"===t?"left":"top",n=o[i];return o[t]>r[t]&&!e.escapeWithReference&&(n=Math.min(o[i],r[t]-("right"===t?o.width:o.height))),D({},i,n)}};return n.forEach(function(t){var e=-1!==["left","top"].indexOf(t)?"primary":"secondary";o=N({},o,a[e](t))}),t.offsets.popper=o,t},priority:["left","right","top","bottom"],padding:5,boundariesElement:"scrollParent"},keepTogether:{order:400,enabled:!0,fn:function(t){var e=t.offsets,i=e.popper,r=e.reference,n=t.placement.split("-")[0],o=Math.floor,a=-1!==["top","bottom"].indexOf(n),p=a?"right":"bottom",s=a?"left":"top",l=a?"width":"height";return i[p]<o(r[s])&&(t.offsets.popper[s]=o(r[s])-i[l]),i[s]>o(r[p])&&(t.offsets.popper[s]=o(r[p])),t}},arrow:{order:500,enabled:!0,fn:function(t,e){var i;if(!et(t.instance.modifiers,"arrow","keepTogether"))return t;var r=e.element;if("string"==typeof r){if(!(r=t.instance.popper.querySelector(r)))return t}else if(!t.instance.popper.contains(r))return console.warn("WARNING: `arrow.element` must be child of its popper element!"),t;var n=t.placement.split("-")[0],o=t.offsets,a=o.popper,p=o.reference,s=-1!==["left","right"].indexOf(n),l=s?"height":"width",c=s?"Top":"Left",f=c.toLowerCase(),d=s?"left":"top",u=s?"bottom":"right",m=B(r)[l];p[u]-m<a[f]&&(t.offsets.popper[f]-=a[f]-(p[u]-m)),p[f]+m>a[u]&&(t.offsets.popper[f]+=p[f]+m-a[u]),t.offsets.popper=I(t.offsets.popper);var h=p[f]+p[l]/2-m/2,b=x(t.instance.popper),v=parseFloat(b["margin"+c],10),y=parseFloat(b["border"+c+"Width"],10),g=h-t.offsets.popper[f]-v-y;return g=Math.max(Math.min(a[l]-m,g),0),t.arrowElement=r,t.offsets.arrow=(D(i={},f,Math.round(g)),D(i,d,""),i),t},element:"[x-arrow]"},flip:{order:600,enabled:!0,fn:function(t,e){if(V(t.instance.modifiers,"inner"))return t;if(t.flipped&&t.placement===t.originalPlacement)return t;var i=F(t.instance.popper,t.instance.reference,e.padding,e.boundariesElement),r=t.placement.split("-")[0],n=j(r),o=t.placement.split("-")[1]||"",a=[];switch(e.behavior){case ot.FLIP:a=[r,n];break;case ot.CLOCKWISE:a=nt(r);break;case ot.COUNTERCLOCKWISE:a=nt(r,!0);break;default:a=e.behavior}return a.forEach(function(p,s){if(r!==p||a.length===s+1)return t;r=t.placement.split("-")[0],n=j(r);var l=t.offsets.popper,c=t.offsets.reference,f=Math.floor,d="left"===r&&f(l.right)>f(c.left)||"right"===r&&f(l.left)<f(c.right)||"top"===r&&f(l.bottom)>f(c.top)||"bottom"===r&&f(l.top)<f(c.bottom),u=f(l.left)<f(i.left),m=f(l.right)>f(i.right),h=f(l.top)<f(i.top),b=f(l.bottom)>f(i.bottom),v="left"===r&&u||"right"===r&&m||"top"===r&&h||"bottom"===r&&b,y=-1!==["top","bottom"].indexOf(r),g=!!e.flipVariations&&(y&&"start"===o&&u||y&&"end"===o&&m||!y&&"start"===o&&h||!y&&"end"===o&&b);(d||v||g)&&(t.flipped=!0,(d||v)&&(r=a[s+1]),g&&(o=function(t){return"end"===t?"start":"start"===t?"end":t}(o)),t.placement=r+(o?"-"+o:""),t.offsets.popper=N({},t.offsets.popper,U(t.instance.popper,t.offsets.reference,t.placement)),t=K(t.instance.modifiers,t,"flip"))}),t},behavior:"flip",padding:5,boundariesElement:"viewport"},inner:{order:700,enabled:!1,fn:function(t){var e=t.placement,i=e.split("-")[0],r=t.offsets,n=r.popper,o=r.reference,a=-1!==["left","right"].indexOf(i),p=-1===["top","left"].indexOf(i);return n[a?"left":"top"]=o[i]-(p?n[a?"width":"height"]:0),t.placement=j(e),t.offsets.popper=I(n),t}},hide:{order:800,enabled:!0,fn:function(t){if(!et(t.instance.modifiers,"hide","preventOverflow"))return t;var e=t.offsets.reference,i=q(t.instance.modifiers,function(t){return"preventOverflow"===t.name}).boundaries;if(e.bottom<i.top||e.left>i.right||e.top>i.bottom||e.right<i.left){if(!0===t.hide)return t;t.hide=!0,t.attributes["x-out-of-boundaries"]=""}else{if(!1===t.hide)return t;t.hide=!1,t.attributes["x-out-of-boundaries"]=!1}return t}},computeStyle:{order:850,enabled:!0,fn:function(t,e){var i=e.x,r=e.y,n=t.offsets.popper,o=q(t.instance.modifiers,function(t){return"applyStyle"===t.name}).gpuAcceleration;void 0!==o&&console.warn("WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!");var a=void 0!==o?o:e.gpuAcceleration,p=H(T(t.instance.popper)),s={position:n.position},l={left:Math.floor(n.left),top:Math.floor(n.top),bottom:Math.floor(n.bottom),right:Math.floor(n.right)},c="bottom"===i?"top":"bottom",f="right"===r?"left":"right",d=G("transform"),u=void 0,m=void 0;if(m="bottom"===c?-p.height+l.bottom:l.top,u="right"===f?-p.width+l.right:l.left,a&&d)s[d]="translate3d("+u+"px, "+m+"px, 0)",s[c]=0,s[f]=0,s.willChange="transform";else{var h="bottom"===c?-1:1,b="right"===f?-1:1;s[c]=m*h,s[f]=u*b,s.willChange=c+", "+f}var v={"x-placement":t.placement};return t.attributes=N({},v,t.attributes),t.styles=N({},s,t.styles),t.arrowStyles=N({},t.offsets.arrow,t.arrowStyles),t},gpuAcceleration:!0,x:"bottom",y:"right"},applyStyle:{order:900,enabled:!0,fn:function(t){return tt(t.instance.popper,t.styles),function(t,e){Object.keys(e).forEach(function(i){!1!==e[i]?t.setAttribute(i,e[i]):t.removeAttribute(i)})}(t.instance.popper,t.attributes),t.arrowElement&&Object.keys(t.arrowStyles).length&&tt(t.arrowElement,t.arrowStyles),t},onLoad:function(t,e,i,r,n){var o=z(0,e,t),a=W(i.placement,o,e,t,i.modifiers.flip.boundariesElement,i.modifiers.flip.padding);return e.setAttribute("x-placement",a),tt(e,{position:"absolute"}),i},gpuAcceleration:void 0}}},st=function(){function t(e,i){var r=this,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};X(this,t),this.scheduleUpdate=function(){return requestAnimationFrame(r.update)},this.update=g(this.update.bind(this)),this.options=N({},t.Defaults,n),this.state={isDestroyed:!1,isCreated:!1,scrollParents:[]},this.reference=e&&e.jquery?e[0]:e,this.popper=i&&i.jquery?i[0]:i,this.options.modifiers={},Object.keys(N({},t.Defaults.modifiers,n.modifiers)).forEach(function(e){r.options.modifiers[e]=N({},t.Defaults.modifiers[e]||{},n.modifiers?n.modifiers[e]:{})}),this.modifiers=Object.keys(this.options.modifiers).map(function(t){return N({name:t},r.options.modifiers[t])}).sort(function(t,e){return t.order-e.order}),this.modifiers.forEach(function(t){t.enabled&&w(t.onLoad)&&t.onLoad(r.reference,r.popper,r.options,t,r.state)}),this.update();var o=this.options.eventsEnabled;o&&this.enableEventListeners(),this.state.eventsEnabled=o}return _(t,[{key:"update",value:function(){return function(){if(!this.state.isDestroyed){var t={instance:this,styles:{},arrowStyles:{},attributes:{},flipped:!1,offsets:{}};t.offsets.reference=z(this.state,this.popper,this.reference),t.placement=W(this.options.placement,t.offsets.reference,this.popper,this.reference,this.options.modifiers.flip.boundariesElement,this.options.modifiers.flip.padding),t.originalPlacement=t.placement,t.offsets.popper=U(this.popper,t.offsets.reference,t.placement),t.offsets.popper.position="absolute",t=K(this.modifiers,t),this.state.isCreated?this.options.onUpdate(t):(this.state.isCreated=!0,this.options.onCreate(t))}}.call(this)}},{key:"destroy",value:function(){return function(){return this.state.isDestroyed=!0,V(this.modifiers,"applyStyle")&&(this.popper.removeAttribute("x-placement"),this.popper.style.left="",this.popper.style.position="",this.popper.style.top="",this.popper.style[G("transform")]=""),this.disableEventListeners(),this.options.removeOnDestroy&&this.popper.parentNode.removeChild(this.popper),this}.call(this)}},{key:"enableEventListeners",value:function(){return function(){this.state.eventsEnabled||(this.state=Q(this.reference,this.options,this.state,this.scheduleUpdate))}.call(this)}},{key:"disableEventListeners",value:function(){return Z.call(this)}}]),t}();function lt(t){return t.getAttribute("x-placement").replace(/-.+/,"")}function ct(t,e,i,r){return e.length?{scale:1===e.length?""+e[0]:i?e[0]+", "+e[1]:e[1]+", "+e[0],translate:1===e.length?r?-e[0]+"px":e[0]+"px":i?r?e[0]+"px, "+-e[1]+"px":e[0]+"px, "+e[1]+"px":r?-e[1]+"px, "+e[0]+"px":e[1]+"px, "+e[0]+"px"}[t]:""}function ft(t,e){if(!t)return"";return e?t:{X:"Y",Y:"X"}[t]}function dt(t,e,i){var r=lt(t),n="top"===r||"bottom"===r,o="right"===r||"bottom"===r,a=function(t){var e=i.match(t);return e?e[1]:""},p=function(t){var e=i.match(t);return e?e[1].split(",").map(parseFloat):[]},s=/translateX?Y?\(([^)]+)\)/,c=/scaleX?Y?\(([^)]+)\)/,f={translate:{axis:a(/translate([XY])/),numbers:p(s)},scale:{axis:a(/scale([XY])/),numbers:p(c)}},d=i.replace(s,"translate"+ft(f.translate.axis,n)+"("+ct("translate",f.translate.numbers,n,o)+")").replace(c,"scale"+ft(f.scale.axis,n)+"("+ct("scale",f.scale.numbers,n,o)+")");e.style[l("transform")]=d}function ut(t){return-(t-o.distance)+"px"}function mt(t){requestAnimationFrame(function(){setTimeout(t,1)})}st.Utils=("undefined"!=typeof window?window:e).PopperUtils,st.placements=it,st.Defaults=pt;var ht={};if(t){var bt=Element.prototype;ht=bt.matches||bt.matchesSelector||bt.webkitMatchesSelector||bt.mozMatchesSelector||bt.msMatchesSelector||function(t){for(var e=(this.document||this.ownerDocument).querySelectorAll(t),i=e.length;--i>=0&&e.item(i)!==this;);return i>-1}}var vt=ht;function yt(t,e){return(Element.prototype.closest||function(t){for(var e=this;e;){if(vt.call(e,t))return e;e=e.parentElement}}).call(t,e)}function gt(t,e){return Array.isArray(t)?t[e]:t}function wt(t,e){t.forEach(function(t){t&&t.setAttribute("data-state",e)})}function xt(t,e){t.forEach(function(t){t&&(t.style[l("transitionDuration")]=e+"ms")})}function kt(t){var e=window.scrollX||window.pageXOffset,i=window.scrollY||window.pageYOffset;t.focus(),scroll(e,i)}var Et={},Tt=function(t){return function(e){return e===Et&&t}},Ot=function(){function t(e){for(var i in c(this,t),e)this[i]=e[i];this.state={destroyed:!1,visible:!1,enabled:!0},this._=Tt({mutationObservers:[]})}return f(t,[{key:"enable",value:function(){this.state.enabled=!0}},{key:"disable",value:function(){this.state.enabled=!1}},{key:"show",value:function(t){var e=this;if(!this.state.destroyed&&this.state.enabled){var i=this.popper,n=this.reference,o=this.options,a=u(i),p=a.tooltip,s=a.backdrop,c=a.content;o.dynamicTitle&&!n.getAttribute("data-original-title")||(n.refObj||document.documentElement.contains(n)?(o.onShow.call(i,this),t=gt(void 0!==t?t:o.duration,0),xt([i,p,s],0),i.style.visibility="visible",this.state.visible=!0,function(t){var e=this.options;this.popperInstance?(!function(t){var e=t.style;e[l("transform")]=null,e.top=null,e.left=null}(this.popper),this.popperInstance.scheduleUpdate(),!e.livePlacement||e.followCursor&&!r.usingTouch||this.popperInstance.enableEventListeners()):(this.popperInstance=Yt.call(this),e.livePlacement||this.popperInstance.disableEventListeners());(function(t,e,i){var r=t.popper,n=t.options,o=n.onCreate,a=n.onUpdate;n.onCreate=n.onUpdate=function(){(function(t){t.offsetHeight})(r),e&&e(),a(),n.onCreate=o,n.onUpdate=a},i||t.scheduleUpdate()})(this.popperInstance,t,!0),e.appendTo.contains(this.popper)||e.appendTo.appendChild(this.popper)}.call(this,function(){if(e.state.visible){if(o.followCursor&&!r.usingTouch||e.popperInstance.scheduleUpdate(),o.followCursor&&!r.usingTouch){e.popperInstance.disableEventListeners();var a=Array.isArray(o.delay)?o.delay[0]:o.delay;e._(Et).lastTriggerEvent&&e._(Et).followCursorListener(a&&e._(Et).lastMouseMoveEvent?e._(Et).lastMouseMoveEvent:e._(Et).lastTriggerEvent)}xt([p,s,s?c:null],t),s&&getComputedStyle(s)[l("transform")],o.interactive&&n.classList.add("tippy-active"),o.sticky&&function(){var t=this;mt(function e(){t.popperInstance&&t.popperInstance.scheduleUpdate(),t.popper.style[l("transitionDuration")]=t.options.updateDuration+"ms",t.state.visible?requestAnimationFrame(e):t.popper.style[l("transitionDuration")]=""})}.call(e),wt([p,s],"visible"),Mt.call(e,t,function(){o.updateDuration||p.classList.add("tippy-notransition"),o.interactive&&kt(i),n.setAttribute("aria-describedby","tippy-"+e.id),o.onShown.call(i,e)})}})):this.destroy())}}},{key:"hide",value:function(t){var e=this;if(!this.state.destroyed&&this.state.enabled){var i=this.popper,r=this.reference,n=this.options,o=u(i),a=o.tooltip,p=o.backdrop,s=o.content;n.onHide.call(i,this),t=gt(void 0!==t?t:n.duration,1),n.updateDuration||a.classList.remove("tippy-notransition"),n.interactive&&r.classList.remove("tippy-active"),i.style.visibility="hidden",this.state.visible=!1,xt([a,p,p?s:null],t),wt([a,p],"hidden"),n.interactive&&n.trigger.indexOf("click")>-1&&kt(r),mt(function(){Mt.call(e,t,function(){!e.state.visible&&n.appendTo.contains(i)&&(e._(Et).isPreparingToShow||(document.removeEventListener("mousemove",e._(Et).followCursorListener),e._(Et).lastMouseMoveEvent=null),r.removeAttribute("aria-describedby"),e.popperInstance.disableEventListeners(),n.appendTo.removeChild(i),n.onHidden.call(i,e))})})}}},{key:"destroy",value:function(){var t=this,e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];if(!this.state.destroyed){this.state.visible&&this.hide(0),this.listeners.forEach(function(e){t.reference.removeEventListener(e.event,e.handler)}),this.reference.setAttribute("title",this.reference.getAttribute("data-original-title")),delete this.reference._tippy;["data-original-title","data-tippy","data-tippy-delegate"].forEach(function(e){t.reference.removeAttribute(e)}),this.options.target&&e&&s(this.reference.querySelectorAll(this.options.target)).forEach(function(t){return t._tippy&&t._tippy.destroy()}),this.popperInstance&&this.popperInstance.destroy(),this._(Et).mutationObservers.forEach(function(t){t.disconnect()}),this.state.destroyed=!0}}}]),t}();function Lt(t){var e=this;if(Pt.call(this),!this.state.visible)if(this.options.target)(function(t){var e=yt(t.target,this.options.target);if(e&&!e._tippy){var i=e.getAttribute("title")||this.title;i&&(e.setAttribute("title",i),It(e,d({},this.options,{target:null})),Lt.call(e._tippy,t))}}).call(this,t);else if(this._(Et).isPreparingToShow=!0,this.options.wait)this.options.wait.call(this.popper,this.show.bind(this),t);else{this.options.followCursor&&!r.usingTouch&&(this._(Et).followCursorListener||function(){var t=this;this._(Et).followCursorListener=function(e){if(!t._(Et).lastTriggerEvent||"focus"!==t._(Et).lastTriggerEvent.type){t._(Et).lastMouseMoveEvent=e;var i=document.documentElement.offsetWidth||document.body.offsetWidth,r=Math.round(t.popper.offsetWidth/2),n=Math.round(t.popper.offsetHeight/2),o=t.options.offset,a=e.pageX,p=e.pageY,s=t.options.placement.replace(/-.+/,"");t.popper.getAttribute("x-placement")&&(s=lt(t.popper));var c=void 0,f=void 0;switch(s){case"top":c=a-r+o,f=p-2*n;break;case"bottom":c=a-r+o,f=p+10;break;case"left":c=a-2*r,f=p-n+o;break;case"right":c=a+5,f=p-n+o}var d=a+5+r+o>i,u=a-5-r+o<0;"top"!==s&&"bottom"!==s||(d&&(c=i-5-2*r),u&&(c=5)),t.popper.style[l("transform")]="translate3d("+c+"px, "+f+"px, 0)"}}}.call(this),document.addEventListener("mousemove",this._(Et).followCursorListener));var i=Array.isArray(this.options.delay)?this.options.delay[0]:this.options.delay;i?this._(Et).showTimeout=setTimeout(function(){e.show()},i):this.show()}}function At(){var t=this;if(Pt.call(this),this.state.visible){this._(Et).isPreparingToShow=!1;var e=Array.isArray(this.options.delay)?this.options.delay[1]:this.options.delay;e?this._(Et).hideTimeout=setTimeout(function(){t.state.visible&&t.hide()},e):this.hide()}}function Ct(){var t=this;return{handleTrigger:function(e){if(t.state.enabled){var i=r.supportsTouch&&r.usingTouch&&["mouseenter","mouseover","focus"].indexOf(e.type)>-1;i&&t.options.touchHold||(t._(Et).lastTriggerEvent=e,"click"===e.type&&"persistent"!==t.options.hideOnClick&&t.state.visible?At.call(t):Lt.call(t,e),i&&r.iOS&&t.reference.click&&t.reference.click())}},handleMouseLeave:function(e){if(!(["mouseleave","mouseout"].indexOf(e.type)>-1&&r.supportsTouch&&r.usingTouch&&t.options.touchHold)){if(t.options.interactive){var i=At.bind(t);return document.body.addEventListener("mouseleave",i),void document.addEventListener("mousemove",function e(r){var o=yt(r.target,n.REFERENCE),a=yt(r.target,n.POPPER)===t.popper,p=o===t.reference;a||p||function(t,e,i){if(!e.getAttribute("x-placement"))return!0;var r=t.clientX,n=t.clientY,o=i.interactiveBorder,a=i.distance,p=e.getBoundingClientRect(),s=lt(e),l=o+a,c={top:p.top-n>o,bottom:n-p.bottom>o,left:p.left-r>o,right:r-p.right>o};switch(s){case"top":c.top=p.top-n>l;break;case"bottom":c.bottom=n-p.bottom>l;break;case"left":c.left=p.left-r>l;break;case"right":c.right=r-p.right>l}return c.top||c.bottom||c.left||c.right}(r,t.popper,t.options)&&(document.body.removeEventListener("mouseleave",i),document.removeEventListener("mousemove",e),At.call(t))})}At.call(t)}},handleBlur:function(e){e.target===t.reference&&e.relatedTarget&&!r.usingTouch&&(yt(e.relatedTarget,n.POPPER)||At.call(t))},handleDelegateShow:function(e){yt(e.target,t.options.target)&&Lt.call(t,e)},handleDelegateHide:function(e){yt(e.target,t.options.target)&&At.call(t)}}}function Yt(){var t=this,e=this.popper,i=this.reference,r=this.options,o=u(e).tooltip,a=r.popperOptions,p="round"===r.arrowType?n.ROUND_ARROW:n.ARROW,s=o.querySelector(p),l=d({placement:r.placement},a||{},{modifiers:d({},a?a.modifiers:{},{arrow:d({element:p},a&&a.modifiers?a.modifiers.arrow:{}),flip:d({enabled:r.flip,padding:r.distance+5,behavior:r.flipBehavior},a&&a.modifiers?a.modifiers.flip:{}),offset:d({offset:r.offset},a&&a.modifiers?a.modifiers.offset:{})}),onCreate:function(){o.style[lt(e)]=ut(r.distance),s&&r.arrowTransform&&dt(e,s,r.arrowTransform)},onUpdate:function(){var t=o.style;t.top="",t.bottom="",t.left="",t.right="",t[lt(e)]=ut(r.distance),s&&r.arrowTransform&&dt(e,s,r.arrowTransform)}});return St.call(this,{target:e,callback:function(){t.popperInstance.update()},options:{childList:!0,subtree:!0,characterData:!0}}),new st(i,e,l)}function Pt(){var t=this._(Et),e=t.showTimeout,i=t.hideTimeout;clearTimeout(e),clearTimeout(i)}function St(t){var e=t.target,i=t.callback,r=t.options;if(window.MutationObserver){var n=new MutationObserver(i);n.observe(e,r),this._(Et).mutationObservers.push(n)}}function Mt(t,e){if(!t)return e();var i=u(this.popper).tooltip,r=function(t,e){e&&i[t+"EventListener"]("ontransitionend"in window?"transitionend":"webkitTransitionEnd",e)},n=function t(n){n.target===i&&(r("remove",t),e())};r("remove",this._(Et).transitionendListener),r("add",n),this._(Et).transitionendListener=n}var Xt=1;function _t(t,e){return t.reduce(function(t,n){var o=Xt,p=function(t,e){return e.arrow&&(e.animateFill=!1),e.appendTo&&"function"==typeof e.appendTo&&(e.appendTo=e.appendTo()),"function"==typeof e.html&&(e.html=e.html(t)),e}(n,e.performance?e:function(t,e){var i=a.reduce(function(i,r){var n=t.getAttribute("data-tippy-"+r.toLowerCase())||e[r];return"false"===n&&(n=!1),"true"===n&&(n=!0),isFinite(n)&&!isNaN(parseFloat(n))&&(n=parseFloat(n)),"target"!==r&&"string"==typeof n&&"["===n.trim().charAt(0)&&(n=JSON.parse(n)),i[r]=n,i},{});return d({},e,i)}(n,e)),s=n.getAttribute("title");if(!(s||p.target||p.html||p.dynamicTitle))return t;n.setAttribute(p.target?"data-tippy-delegate":"data-tippy",""),m(n);var c=function(t,e,i){var r=i.arrow,n=i.arrowType,o=i.arrowTransform,a=i.animateFill,p=i.inertia,s=i.animation,c=i.size,f=i.theme,d=i.html,u=i.zIndex,m=i.interactive,h=i.maxWidth,b=document.createElement("div");b.setAttribute("class","tippy-popper"),b.setAttribute("role","tooltip"),b.setAttribute("id","tippy-"+t),b.style.zIndex=u,b.style.maxWidth=h;var v=document.createElement("div");if(v.setAttribute("class","tippy-tooltip"),v.setAttribute("data-size",c),v.setAttribute("data-animation",s),v.setAttribute("data-state","hidden"),f.split(" ").forEach(function(t){v.classList.add(t+"-theme")}),r){var y=document.createElement("div");y.style[l("transform")]=o,"round"===n?(y.classList.add("tippy-roundarrow"),y.innerHTML='<svg viewBox="0 0 24 8" xmlns="http://www.w3.org/2000/svg"><path d="M1 8s4.577-.019 7.253-4.218c2.357-3.698 5.175-3.721 7.508 0C18.404 7.997 23 8 23 8H1z"/></svg>'):y.classList.add("tippy-arrow"),v.appendChild(y)}if(a){v.setAttribute("data-animatefill","");var g=document.createElement("div");g.setAttribute("data-state","hidden"),g.classList.add("tippy-backdrop"),v.appendChild(g)}p&&v.setAttribute("data-inertia",""),m&&v.setAttribute("data-interactive","");var w=document.createElement("div");if(w.setAttribute("class","tippy-content"),d){var x=void 0;d instanceof Element?(w.appendChild(d),x="#"+d.id||"tippy-html-template"):(w.innerHTML=document.querySelector(d).innerHTML,x=d),b.setAttribute("data-html",""),m&&b.setAttribute("tabindex","-1"),v.setAttribute("data-template-id",x)}else w.innerHTML=e;return v.appendChild(w),b.appendChild(v),b}(o,s,p),f=new Ot({id:o,reference:n,popper:c,options:p,title:s,popperInstance:null});p.createPopperInstanceOnInit&&(f.popperInstance=Yt.call(f),f.popperInstance.disableEventListeners());var h=Ct.call(f);return f.listeners=p.trigger.trim().split(" ").reduce(function(t,e){return t.concat(function(t,e,n,o){var a=n.handleTrigger,p=n.handleMouseLeave,s=n.handleBlur,l=n.handleDelegateShow,c=n.handleDelegateHide,f=[];if("manual"===t)return f;var d=function(t,i){e.addEventListener(t,i),f.push({event:t,handler:i})};return o.target?(r.supportsTouch&&o.touchHold&&(d("touchstart",l),d("touchend",c)),"mouseenter"===t&&(d("mouseover",l),d("mouseout",c)),"focus"===t&&(d("focusin",l),d("focusout",c)),"click"===t&&d("click",l)):(d(t,a),r.supportsTouch&&o.touchHold&&(d("touchstart",a),d("touchend",p)),"mouseenter"===t&&d("mouseleave",p),"focus"===t&&d(i?"focusout":"blur",s)),f}(e,n,h,p))},[]),p.dynamicTitle&&St.call(f,{target:n,callback:function(){var t=u(c).content,e=n.getAttribute("title");e&&(t.innerHTML=f.title=e,m(n))},options:{attributes:!0}}),n._tippy=f,c._tippy=f,c._reference=n,t.push(f),Xt++,t},[])}function Dt(t){s(document.querySelectorAll(n.POPPER)).forEach(function(e){var i=e._tippy,r=i.options;!(!0===r.hideOnClick||r.trigger.indexOf("focus")>-1)||t&&e===t.popper||i.hide()})}var Nt=!1;function It(t,e){return r.supported&&!Nt&&(!function(){var t=function(){r.usingTouch||(r.usingTouch=!0,r.iOS&&document.body.classList.add("tippy-touch"),r.dynamicInputDetection&&window.performance&&document.addEventListener("mousemove",e),r.onUserInputChange("touch"))},e=function(){var t=void 0;return function(){var i=performance.now();i-t<20&&(r.usingTouch=!1,document.removeEventListener("mousemove",e),r.iOS||document.body.classList.remove("tippy-touch"),r.onUserInputChange("mouse")),t=i}}();document.addEventListener("click",function(t){if(!(t.target instanceof Element))return Dt();var e=yt(t.target,n.REFERENCE),i=yt(t.target,n.POPPER);if(!i||!i._reference._tippy.options.interactive){if(e){var o=e._tippy.options;if(!o.multiple&&r.usingTouch||!o.multiple&&o.trigger.indexOf("click")>-1)return Dt(e._tippy);if(!0!==o.hideOnClick||o.trigger.indexOf("click")>-1)return}Dt()}}),document.addEventListener("touchstart",t),window.addEventListener("blur",function(){var t=document.activeElement;t&&t.blur&&vt.call(t,n.REFERENCE)&&t.blur()}),window.addEventListener("resize",function(){s(document.querySelectorAll(n.POPPER)).forEach(function(t){var e=t._tippy;e.options.livePlacement||e.popperInstance.scheduleUpdate()})}),r.supportsTouch||!navigator.maxTouchPoints&&!navigator.msMaxTouchPoints||document.addEventListener("pointerdown",t)}(),Nt=!0),p(t)&&(t.refObj=!0,t.attributes=t.attributes||{},t.setAttribute=function(e,i){t.attributes[e]=i},t.getAttribute=function(e){return t.attributes[e]},t.removeAttribute=function(e){delete t.attributes[e]},t.addEventListener=function(){},t.removeEventListener=function(){},t.classList={classNames:{},add:function(e){return t.classList.classNames[e]=!0},remove:function(e){return delete t.classList.classNames[e],!0},contains:function(e){return!!t.classList.classNames[e]}}),e=d({},o,e),{selector:t,options:e,tooltips:r.supported?_t(function(t){if(t instanceof Element||p(t))return[t];if(t instanceof NodeList)return s(t);if(Array.isArray(t))return t;try{return s(document.querySelectorAll(t))}catch(t){return[]}}(t),e):[],destroyAll:function(){this.tooltips.forEach(function(t){return t.destroy()}),this.tooltips=[]}}}return It.browser=r,It.defaults=o,function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";if(t&&r.supported){var i=document.head||document.querySelector("head"),n=document.createElement("style");n.type="text/css",i.insertBefore(n,i.firstChild),n.styleSheet?n.styleSheet.cssText=e:n.appendChild(document.createTextNode(e))}}('.tippy-touch{cursor:pointer!important}.tippy-notransition{-webkit-transition:none!important;transition:none!important}.tippy-popper{max-width:350px;-webkit-perspective:700px;perspective:700px;z-index:9999;outline:0;-webkit-transition-timing-function:cubic-bezier(.165,.84,.44,1);transition-timing-function:cubic-bezier(.165,.84,.44,1);pointer-events:none;line-height:1.4}.tippy-popper[data-html]{max-width:96%;max-width:calc(100% - 20px)}.tippy-popper[x-placement^=top] .tippy-backdrop{border-radius:40% 40% 0 0}.tippy-popper[x-placement^=top] .tippy-roundarrow{bottom:-8px;margin:0 6px;-webkit-transform-origin:50% 0;transform-origin:50% 0}.tippy-popper[x-placement^=top] .tippy-roundarrow svg{position:absolute;left:0;-webkit-transform:rotate(180deg);transform:rotate(180deg)}.tippy-popper[x-placement^=top] .tippy-arrow{border-top:7px solid #333;border-right:7px solid transparent;border-left:7px solid transparent;bottom:-7px;margin:0 7px;-webkit-transform-origin:50% 0;transform-origin:50% 0}.tippy-popper[x-placement^=top] .tippy-backdrop{-webkit-transform-origin:0 100%;transform-origin:0 100%}.tippy-popper[x-placement^=top] .tippy-backdrop[data-state=visible]{-webkit-transform:scale(5.5) translate(-50%,25%);transform:scale(5.5) translate(-50%,25%);opacity:1}.tippy-popper[x-placement^=top] .tippy-backdrop[data-state=hidden]{-webkit-transform:scale(1) translate(-50%,25%);transform:scale(1) translate(-50%,25%);opacity:0}.tippy-popper[x-placement^=top] [data-animation=shift-toward][data-state=visible]{opacity:1;-webkit-transform:translateY(-10px);transform:translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=shift-toward][data-state=hidden]{opacity:0;-webkit-transform:translateY(-20px);transform:translateY(-20px)}.tippy-popper[x-placement^=top] [data-animation=perspective]{-webkit-transform-origin:bottom;transform-origin:bottom}.tippy-popper[x-placement^=top] [data-animation=perspective][data-state=visible]{opacity:1;-webkit-transform:translateY(-10px) rotateX(0);transform:translateY(-10px) rotateX(0)}.tippy-popper[x-placement^=top] [data-animation=perspective][data-state=hidden]{opacity:0;-webkit-transform:translateY(0) rotateX(90deg);transform:translateY(0) rotateX(90deg)}.tippy-popper[x-placement^=top] [data-animation=fade][data-state=visible]{opacity:1;-webkit-transform:translateY(-10px);transform:translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=fade][data-state=hidden]{opacity:0;-webkit-transform:translateY(-10px);transform:translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=shift-away][data-state=visible]{opacity:1;-webkit-transform:translateY(-10px);transform:translateY(-10px)}.tippy-popper[x-placement^=top] [data-animation=shift-away][data-state=hidden]{opacity:0;-webkit-transform:translateY(0);transform:translateY(0)}.tippy-popper[x-placement^=top] [data-animation=scale][data-state=visible]{opacity:1;-webkit-transform:translateY(-10px) scale(1);transform:translateY(-10px) scale(1)}.tippy-popper[x-placement^=top] [data-animation=scale][data-state=hidden]{opacity:0;-webkit-transform:translateY(0) scale(0);transform:translateY(0) scale(0)}.tippy-popper[x-placement^=bottom] .tippy-backdrop{border-radius:0 0 30% 30%}.tippy-popper[x-placement^=bottom] .tippy-roundarrow{top:-8px;margin:0 6px;-webkit-transform-origin:50% 100%;transform-origin:50% 100%}.tippy-popper[x-placement^=bottom] .tippy-roundarrow svg{position:absolute;left:0;-webkit-transform:rotate(0);transform:rotate(0)}.tippy-popper[x-placement^=bottom] .tippy-arrow{border-bottom:7px solid #333;border-right:7px solid transparent;border-left:7px solid transparent;top:-7px;margin:0 7px;-webkit-transform-origin:50% 100%;transform-origin:50% 100%}.tippy-popper[x-placement^=bottom] .tippy-backdrop{-webkit-transform-origin:0 -100%;transform-origin:0 -100%}.tippy-popper[x-placement^=bottom] .tippy-backdrop[data-state=visible]{-webkit-transform:scale(5.5) translate(-50%,-125%);transform:scale(5.5) translate(-50%,-125%);opacity:1}.tippy-popper[x-placement^=bottom] .tippy-backdrop[data-state=hidden]{-webkit-transform:scale(1) translate(-50%,-125%);transform:scale(1) translate(-50%,-125%);opacity:0}.tippy-popper[x-placement^=bottom] [data-animation=shift-toward][data-state=visible]{opacity:1;-webkit-transform:translateY(10px);transform:translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=shift-toward][data-state=hidden]{opacity:0;-webkit-transform:translateY(20px);transform:translateY(20px)}.tippy-popper[x-placement^=bottom] [data-animation=perspective]{-webkit-transform-origin:top;transform-origin:top}.tippy-popper[x-placement^=bottom] [data-animation=perspective][data-state=visible]{opacity:1;-webkit-transform:translateY(10px) rotateX(0);transform:translateY(10px) rotateX(0)}.tippy-popper[x-placement^=bottom] [data-animation=perspective][data-state=hidden]{opacity:0;-webkit-transform:translateY(0) rotateX(-90deg);transform:translateY(0) rotateX(-90deg)}.tippy-popper[x-placement^=bottom] [data-animation=fade][data-state=visible]{opacity:1;-webkit-transform:translateY(10px);transform:translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=fade][data-state=hidden]{opacity:0;-webkit-transform:translateY(10px);transform:translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=shift-away][data-state=visible]{opacity:1;-webkit-transform:translateY(10px);transform:translateY(10px)}.tippy-popper[x-placement^=bottom] [data-animation=shift-away][data-state=hidden]{opacity:0;-webkit-transform:translateY(0);transform:translateY(0)}.tippy-popper[x-placement^=bottom] [data-animation=scale][data-state=visible]{opacity:1;-webkit-transform:translateY(10px) scale(1);transform:translateY(10px) scale(1)}.tippy-popper[x-placement^=bottom] [data-animation=scale][data-state=hidden]{opacity:0;-webkit-transform:translateY(0) scale(0);transform:translateY(0) scale(0)}.tippy-popper[x-placement^=left] .tippy-backdrop{border-radius:30% 0 0 30%}.tippy-popper[x-placement^=left] .tippy-roundarrow{right:-16px;margin:4px 0;-webkit-transform-origin:33.33333333% 50%;transform-origin:33.33333333% 50%}.tippy-popper[x-placement^=left] .tippy-roundarrow svg{position:absolute;left:0;-webkit-transform:rotate(90deg);transform:rotate(90deg)}.tippy-popper[x-placement^=left] .tippy-arrow{border-left:7px solid #333;border-top:7px solid transparent;border-bottom:7px solid transparent;right:-7px;margin:4px 0;-webkit-transform-origin:0 50%;transform-origin:0 50%}.tippy-popper[x-placement^=left] .tippy-backdrop{-webkit-transform-origin:100% 0;transform-origin:100% 0}.tippy-popper[x-placement^=left] .tippy-backdrop[data-state=visible]{-webkit-transform:scale(5.5) translate(33%,-50%);transform:scale(5.5) translate(33%,-50%);opacity:1}.tippy-popper[x-placement^=left] .tippy-backdrop[data-state=hidden]{-webkit-transform:scale(1.5) translate(33%,-50%);transform:scale(1.5) translate(33%,-50%);opacity:0}.tippy-popper[x-placement^=left] [data-animation=shift-toward][data-state=visible]{opacity:1;-webkit-transform:translateX(-10px);transform:translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=shift-toward][data-state=hidden]{opacity:0;-webkit-transform:translateX(-20px);transform:translateX(-20px)}.tippy-popper[x-placement^=left] [data-animation=perspective]{-webkit-transform-origin:right;transform-origin:right}.tippy-popper[x-placement^=left] [data-animation=perspective][data-state=visible]{opacity:1;-webkit-transform:translateX(-10px) rotateY(0);transform:translateX(-10px) rotateY(0)}.tippy-popper[x-placement^=left] [data-animation=perspective][data-state=hidden]{opacity:0;-webkit-transform:translateX(0) rotateY(-90deg);transform:translateX(0) rotateY(-90deg)}.tippy-popper[x-placement^=left] [data-animation=fade][data-state=visible]{opacity:1;-webkit-transform:translateX(-10px);transform:translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=fade][data-state=hidden]{opacity:0;-webkit-transform:translateX(-10px);transform:translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=shift-away][data-state=visible]{opacity:1;-webkit-transform:translateX(-10px);transform:translateX(-10px)}.tippy-popper[x-placement^=left] [data-animation=shift-away][data-state=hidden]{opacity:0;-webkit-transform:translateX(0);transform:translateX(0)}.tippy-popper[x-placement^=left] [data-animation=scale][data-state=visible]{opacity:1;-webkit-transform:translateX(-10px) scale(1);transform:translateX(-10px) scale(1)}.tippy-popper[x-placement^=left] [data-animation=scale][data-state=hidden]{opacity:0;-webkit-transform:translateX(0) scale(0);transform:translateX(0) scale(0)}.tippy-popper[x-placement^=right] .tippy-backdrop{border-radius:0 30% 30% 0}.tippy-popper[x-placement^=right] .tippy-roundarrow{left:-16px;margin:4px 0;-webkit-transform-origin:66.66666666% 50%;transform-origin:66.66666666% 50%}.tippy-popper[x-placement^=right] .tippy-roundarrow svg{position:absolute;left:0;-webkit-transform:rotate(-90deg);transform:rotate(-90deg)}.tippy-popper[x-placement^=right] .tippy-arrow{border-right:7px solid #333;border-top:7px solid transparent;border-bottom:7px solid transparent;left:-7px;margin:4px 0;-webkit-transform-origin:100% 50%;transform-origin:100% 50%}.tippy-popper[x-placement^=right] .tippy-backdrop{-webkit-transform-origin:-100% 0;transform-origin:-100% 0}.tippy-popper[x-placement^=right] .tippy-backdrop[data-state=visible]{-webkit-transform:scale(5.5) translate(-133%,-50%);transform:scale(5.5) translate(-133%,-50%);opacity:1}.tippy-popper[x-placement^=right] .tippy-backdrop[data-state=hidden]{-webkit-transform:scale(1.5) translate(-133%,-50%);transform:scale(1.5) translate(-133%,-50%);opacity:0}.tippy-popper[x-placement^=right] [data-animation=shift-toward][data-state=visible]{opacity:1;-webkit-transform:translateX(10px);transform:translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=shift-toward][data-state=hidden]{opacity:0;-webkit-transform:translateX(20px);transform:translateX(20px)}.tippy-popper[x-placement^=right] [data-animation=perspective]{-webkit-transform-origin:left;transform-origin:left}.tippy-popper[x-placement^=right] [data-animation=perspective][data-state=visible]{opacity:1;-webkit-transform:translateX(10px) rotateY(0);transform:translateX(10px) rotateY(0)}.tippy-popper[x-placement^=right] [data-animation=perspective][data-state=hidden]{opacity:0;-webkit-transform:translateX(0) rotateY(90deg);transform:translateX(0) rotateY(90deg)}.tippy-popper[x-placement^=right] [data-animation=fade][data-state=visible]{opacity:1;-webkit-transform:translateX(10px);transform:translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=fade][data-state=hidden]{opacity:0;-webkit-transform:translateX(10px);transform:translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=shift-away][data-state=visible]{opacity:1;-webkit-transform:translateX(10px);transform:translateX(10px)}.tippy-popper[x-placement^=right] [data-animation=shift-away][data-state=hidden]{opacity:0;-webkit-transform:translateX(0);transform:translateX(0)}.tippy-popper[x-placement^=right] [data-animation=scale][data-state=visible]{opacity:1;-webkit-transform:translateX(10px) scale(1);transform:translateX(10px) scale(1)}.tippy-popper[x-placement^=right] [data-animation=scale][data-state=hidden]{opacity:0;-webkit-transform:translateX(0) scale(0);transform:translateX(0) scale(0)}.tippy-tooltip{position:relative;color:#fff;border-radius:4px;font-size:.9rem;padding:.3rem .6rem;text-align:center;will-change:transform;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;background-color:#333}.tippy-tooltip[data-size=small]{padding:.2rem .4rem;font-size:.75rem}.tippy-tooltip[data-size=large]{padding:.4rem .8rem;font-size:1rem}.tippy-tooltip[data-animatefill]{overflow:hidden;background-color:transparent}.tippy-tooltip[data-animatefill] .tippy-content{-webkit-transition:-webkit-clip-path cubic-bezier(.46,.1,.52,.98);transition:-webkit-clip-path cubic-bezier(.46,.1,.52,.98);transition:clip-path cubic-bezier(.46,.1,.52,.98);transition:clip-path cubic-bezier(.46,.1,.52,.98),-webkit-clip-path cubic-bezier(.46,.1,.52,.98)}.tippy-tooltip[data-interactive]{pointer-events:auto}.tippy-tooltip[data-inertia][data-state=visible]{-webkit-transition-timing-function:cubic-bezier(.53,2,.36,.85);transition-timing-function:cubic-bezier(.53,2,.36,.85)}.tippy-tooltip[data-inertia][data-state=hidden]{-webkit-transition-timing-function:ease;transition-timing-function:ease}.tippy-arrow,.tippy-roundarrow{position:absolute;width:0;height:0}.tippy-roundarrow{width:24px;height:8px;fill:#333;pointer-events:none}.tippy-roundarrow path{pointer-events:auto}.tippy-backdrop{position:absolute;will-change:transform;background-color:#333;border-radius:50%;width:26%;left:50%;top:50%;z-index:-1;-webkit-transition:all cubic-bezier(.46,.1,.52,.98);transition:all cubic-bezier(.46,.1,.52,.98);-webkit-backface-visibility:hidden;backface-visibility:hidden}.tippy-backdrop:after{content:"";float:left;padding-top:100%}body:not(.tippy-touch) .tippy-tooltip[data-animatefill][data-state=visible] .tippy-content{-webkit-clip-path:ellipse(100% 100% at 50% 50%);clip-path:ellipse(100% 100% at 50% 50%)}body:not(.tippy-touch) .tippy-tooltip[data-animatefill][data-state=hidden] .tippy-content{-webkit-clip-path:ellipse(5% 50% at 50% 50%);clip-path:ellipse(5% 50% at 50% 50%)}body:not(.tippy-touch) .tippy-popper[x-placement=right] .tippy-tooltip[data-animatefill][data-state=visible] .tippy-content{-webkit-clip-path:ellipse(135% 100% at 0 50%);clip-path:ellipse(135% 100% at 0 50%)}body:not(.tippy-touch) .tippy-popper[x-placement=right] .tippy-tooltip[data-animatefill][data-state=hidden] .tippy-content{-webkit-clip-path:ellipse(25% 100% at 0 50%);clip-path:ellipse(25% 100% at 0 50%)}body:not(.tippy-touch) .tippy-popper[x-placement=left] .tippy-tooltip[data-animatefill][data-state=visible] .tippy-content{-webkit-clip-path:ellipse(135% 100% at 100% 50%);clip-path:ellipse(135% 100% at 100% 50%)}body:not(.tippy-touch) .tippy-popper[x-placement=left] .tippy-tooltip[data-animatefill][data-state=hidden] .tippy-content{-webkit-clip-path:ellipse(25% 100% at 100% 50%);clip-path:ellipse(25% 100% at 100% 50%)}@media (max-width:360px){.tippy-popper{max-width:96%;max-width:calc(100% - 20px)}}'),It})}).call(this,i(3))},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.initialize=n;var r=function(t){return t&&t.__esModule?t:{default:t}}(i(4));function n(){document.querySelectorAll(".js-otgs-popover-tooltip, .js-wpml-popover-tooltip").forEach(function(t){(0,r.default)(t,{arrow:!0,theme:"otgs",animation:"fade",sticky:!0,interactive:!0})})}i(10),window.addEventListener("DOMContentLoaded",function(){n()})},function(t,e,i){t.exports=i(5)},,,,function(t,e){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,